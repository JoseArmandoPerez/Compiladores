
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNAR BOOL BREAK CADENA CIN COMA COMDOB CORDER CORIZQ COUT DISTINTO DIV DO ENDL ENTERO FLOAT GET IDENTIFICADOR IGUAL INCLUDE INT LLADER LLAIZQ MAYORDER MAYORIGUAL MAYORIZQ MAYORQUE MENORIGUAL MENORQUE MIENTRAS MINUSMINUS MODULO MULT NAMESPACE NOT NUMERAL OR PARA PARDER PARIZQ PLUSPLUS POTENCIA PROGRAM PUNTOCOMA READ RESTA RETURN SI SINO STD SUMA USING VOID WRITEprograma : PROGRAM LLAIZQ lista_decl lista_sent LLADERlista_decl : lista_decl decl\n                  | decl\n                  | emptydecl : tipo lista_id PUNTOCOMAtipo : INT\n            | FLOAT\n            | BOOLlista_id : lista_id COMA IDENTIFICADOR\n                | IDENTIFICADORlista_sent : lista_sent sent\n                  | sent\n                  | emptysent : sent_if\n            | sent_while\n            | sent_do\n            | sent_read\n            | sent_write\n            | bloque\n            | sent_assign\n            | BREAK PUNTOCOMAsent_if : SI PARIZQ exp_bool PARDER bloque SINO bloque\n               | SI PARIZQ exp_bool PARDER bloquesent_while : MIENTRAS PARIZQ exp_bool PARDER bloquesent_do : DO bloque MIENTRAS PARIZQ exp_bool PARDER PUNTOCOMAsent_read : READ PARIZQ IDENTIFICADOR PARDER PUNTOCOMAsent_write : WRITE PARIZQ exp PARDER PUNTOCOMAbloque : LLAIZQ lista_sent LLADERsent_assign : IDENTIFICADOR ASIGNAR exp PUNTOCOMAexp_bool : exp_bool OR exp_bool\n                | exp_bool AND exp_bool\n                | NOT exp_bool\n                | exp_relexp_rel : exp MENORQUE exp\n               | exp MAYORQUE exp\n               | exp MENORIGUAL exp\n               | exp MAYORIGUAL exp\n               | exp IGUAL exp\n               | exp DISTINTO expexp : exp SUMA exp\n           | exp RESTA exp\n           | exp MULT exp\n           | exp DIV exp\n           | exp POTENCIA exp\n           | exp MODULO exp\n           | factorfactor : ENTERO\n              | IDENTIFICADOR\n              | CADENA\n              | PARIZQ exp PARDERempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,33,],[0,-1,]),'LLAIZQ':([2,3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,26,32,34,35,42,44,61,77,80,83,98,100,101,102,104,105,],[3,-51,11,-3,-4,11,11,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,11,11,-11,-21,-5,-28,11,11,-29,-23,-24,-26,-27,11,-22,-25,]),'BREAK':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,32,34,35,42,44,80,83,98,100,101,104,105,],[-51,23,-3,-4,23,23,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,23,-11,-21,-5,-28,-29,-23,-24,-26,-27,-22,-25,]),'INT':([3,4,5,6,13,42,],[8,8,-3,-4,-2,-5,]),'FLOAT':([3,4,5,6,13,42,],[9,9,-3,-4,-2,-5,]),'BOOL':([3,4,5,6,13,42,],[10,10,-3,-4,-2,-5,]),'SI':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,32,34,35,42,44,80,83,98,100,101,104,105,],[-51,24,-3,-4,24,24,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,24,-11,-21,-5,-28,-29,-23,-24,-26,-27,-22,-25,]),'MIENTRAS':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,32,34,35,38,42,44,80,83,98,100,101,104,105,],[-51,25,-3,-4,25,25,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,25,-11,-21,55,-5,-28,-29,-23,-24,-26,-27,-22,-25,]),'DO':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,32,34,35,42,44,80,83,98,100,101,104,105,],[-51,26,-3,-4,26,26,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,26,-11,-21,-5,-28,-29,-23,-24,-26,-27,-22,-25,]),'READ':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,32,34,35,42,44,80,83,98,100,101,104,105,],[-51,27,-3,-4,27,27,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,27,-11,-21,-5,-28,-29,-23,-24,-26,-27,-22,-25,]),'WRITE':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,32,34,35,42,44,80,83,98,100,101,104,105,],[-51,29,-3,-4,29,29,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,29,-11,-21,-5,-28,-29,-23,-24,-26,-27,-22,-25,]),'IDENTIFICADOR':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,32,34,35,36,37,39,40,41,42,43,44,45,47,62,63,65,66,67,68,69,70,71,72,73,74,75,76,78,80,83,98,100,101,104,105,],[-51,28,-3,-4,31,-6,-7,-8,28,28,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,28,-11,-21,52,52,56,52,52,-5,59,-28,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-29,-23,-24,-26,-27,-22,-25,]),'LLADER':([3,4,5,6,11,12,13,14,15,16,17,18,19,20,21,22,32,34,35,42,44,80,83,98,100,101,104,105,],[-51,-51,-3,-4,-51,33,-2,-12,-13,-14,-15,-16,-17,-18,-19,-20,44,-11,-21,-5,-28,-29,-23,-24,-26,-27,-22,-25,]),'PUNTOCOMA':([23,30,31,50,51,52,53,57,59,79,81,82,92,93,94,95,96,97,103,],[35,42,-10,-46,-47,-48,-49,80,-9,100,101,-50,-40,-41,-42,-43,-44,-45,105,]),'PARIZQ':([24,25,27,29,36,37,40,41,45,47,55,62,63,65,66,67,68,69,70,71,72,73,74,75,76,78,],[36,37,39,41,45,45,45,45,45,45,78,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'ASIGNAR':([28,],[40,]),'COMA':([30,31,59,],[43,-10,-9,]),'NOT':([36,37,47,62,63,78,],[47,47,47,47,47,47,]),'ENTERO':([36,37,40,41,45,47,62,63,65,66,67,68,69,70,71,72,73,74,75,76,78,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'CADENA':([36,37,40,41,45,47,62,63,65,66,67,68,69,70,71,72,73,74,75,76,78,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'SINO':([44,83,],[-28,102,]),'PARDER':([46,48,50,51,52,53,54,56,58,60,64,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,],[61,-33,-46,-47,-48,-49,77,79,81,82,-32,-50,-30,-31,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,103,]),'OR':([46,48,50,51,52,53,54,64,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,],[62,-33,-46,-47,-48,-49,62,62,-50,62,62,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,62,]),'AND':([46,48,50,51,52,53,54,64,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,],[63,-33,-46,-47,-48,-49,63,63,-50,63,63,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,63,]),'MENORQUE':([49,50,51,52,53,82,92,93,94,95,96,97,],[65,-46,-47,-48,-49,-50,-40,-41,-42,-43,-44,-45,]),'MAYORQUE':([49,50,51,52,53,82,92,93,94,95,96,97,],[66,-46,-47,-48,-49,-50,-40,-41,-42,-43,-44,-45,]),'MENORIGUAL':([49,50,51,52,53,82,92,93,94,95,96,97,],[67,-46,-47,-48,-49,-50,-40,-41,-42,-43,-44,-45,]),'MAYORIGUAL':([49,50,51,52,53,82,92,93,94,95,96,97,],[68,-46,-47,-48,-49,-50,-40,-41,-42,-43,-44,-45,]),'IGUAL':([49,50,51,52,53,82,92,93,94,95,96,97,],[69,-46,-47,-48,-49,-50,-40,-41,-42,-43,-44,-45,]),'DISTINTO':([49,50,51,52,53,82,92,93,94,95,96,97,],[70,-46,-47,-48,-49,-50,-40,-41,-42,-43,-44,-45,]),'SUMA':([49,50,51,52,53,57,58,60,82,86,87,88,89,90,91,92,93,94,95,96,97,],[71,-46,-47,-48,-49,71,71,71,-50,71,71,71,71,71,71,71,71,71,71,71,71,]),'RESTA':([49,50,51,52,53,57,58,60,82,86,87,88,89,90,91,92,93,94,95,96,97,],[72,-46,-47,-48,-49,72,72,72,-50,72,72,72,72,72,72,72,72,72,72,72,72,]),'MULT':([49,50,51,52,53,57,58,60,82,86,87,88,89,90,91,92,93,94,95,96,97,],[73,-46,-47,-48,-49,73,73,73,-50,73,73,73,73,73,73,73,73,73,73,73,73,]),'DIV':([49,50,51,52,53,57,58,60,82,86,87,88,89,90,91,92,93,94,95,96,97,],[74,-46,-47,-48,-49,74,74,74,-50,74,74,74,74,74,74,74,74,74,74,74,74,]),'POTENCIA':([49,50,51,52,53,57,58,60,82,86,87,88,89,90,91,92,93,94,95,96,97,],[75,-46,-47,-48,-49,75,75,75,-50,75,75,75,75,75,75,75,75,75,75,75,75,]),'MODULO':([49,50,51,52,53,57,58,60,82,86,87,88,89,90,91,92,93,94,95,96,97,],[76,-46,-47,-48,-49,76,76,76,-50,76,76,76,76,76,76,76,76,76,76,76,76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'lista_decl':([3,],[4,]),'decl':([3,4,],[5,13,]),'empty':([3,4,11,],[6,15,15,]),'tipo':([3,4,],[7,7,]),'lista_sent':([4,11,],[12,32,]),'sent':([4,11,12,32,],[14,14,34,34,]),'sent_if':([4,11,12,32,],[16,16,16,16,]),'sent_while':([4,11,12,32,],[17,17,17,17,]),'sent_do':([4,11,12,32,],[18,18,18,18,]),'sent_read':([4,11,12,32,],[19,19,19,19,]),'sent_write':([4,11,12,32,],[20,20,20,20,]),'bloque':([4,11,12,26,32,61,77,102,],[21,21,21,38,21,83,98,104,]),'sent_assign':([4,11,12,32,],[22,22,22,22,]),'lista_id':([7,],[30,]),'exp_bool':([36,37,47,62,63,78,],[46,54,64,84,85,99,]),'exp_rel':([36,37,47,62,63,78,],[48,48,48,48,48,48,]),'exp':([36,37,40,41,45,47,62,63,65,66,67,68,69,70,71,72,73,74,75,76,78,],[49,49,57,58,60,49,49,49,86,87,88,89,90,91,92,93,94,95,96,97,49,]),'factor':([36,37,40,41,45,47,62,63,65,66,67,68,69,70,71,72,73,74,75,76,78,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> PROGRAM LLAIZQ lista_decl lista_sent LLADER','programa',5,'p_programa','Sintactico.py',6),
  ('lista_decl -> lista_decl decl','lista_decl',2,'p_lista_decl','Sintactico.py',10),
  ('lista_decl -> decl','lista_decl',1,'p_lista_decl','Sintactico.py',11),
  ('lista_decl -> empty','lista_decl',1,'p_lista_decl','Sintactico.py',12),
  ('decl -> tipo lista_id PUNTOCOMA','decl',3,'p_decl','Sintactico.py',21),
  ('tipo -> INT','tipo',1,'p_tipo','Sintactico.py',25),
  ('tipo -> FLOAT','tipo',1,'p_tipo','Sintactico.py',26),
  ('tipo -> BOOL','tipo',1,'p_tipo','Sintactico.py',27),
  ('lista_id -> lista_id COMA IDENTIFICADOR','lista_id',3,'p_lista_id','Sintactico.py',31),
  ('lista_id -> IDENTIFICADOR','lista_id',1,'p_lista_id','Sintactico.py',32),
  ('lista_sent -> lista_sent sent','lista_sent',2,'p_lista_sent','Sintactico.py',39),
  ('lista_sent -> sent','lista_sent',1,'p_lista_sent','Sintactico.py',40),
  ('lista_sent -> empty','lista_sent',1,'p_lista_sent','Sintactico.py',41),
  ('sent -> sent_if','sent',1,'p_sent','Sintactico.py',50),
  ('sent -> sent_while','sent',1,'p_sent','Sintactico.py',51),
  ('sent -> sent_do','sent',1,'p_sent','Sintactico.py',52),
  ('sent -> sent_read','sent',1,'p_sent','Sintactico.py',53),
  ('sent -> sent_write','sent',1,'p_sent','Sintactico.py',54),
  ('sent -> bloque','sent',1,'p_sent','Sintactico.py',55),
  ('sent -> sent_assign','sent',1,'p_sent','Sintactico.py',56),
  ('sent -> BREAK PUNTOCOMA','sent',2,'p_sent','Sintactico.py',57),
  ('sent_if -> SI PARIZQ exp_bool PARDER bloque SINO bloque','sent_if',7,'p_sent_if','Sintactico.py',64),
  ('sent_if -> SI PARIZQ exp_bool PARDER bloque','sent_if',5,'p_sent_if','Sintactico.py',65),
  ('sent_while -> MIENTRAS PARIZQ exp_bool PARDER bloque','sent_while',5,'p_sent_while','Sintactico.py',72),
  ('sent_do -> DO bloque MIENTRAS PARIZQ exp_bool PARDER PUNTOCOMA','sent_do',7,'p_sent_do','Sintactico.py',76),
  ('sent_read -> READ PARIZQ IDENTIFICADOR PARDER PUNTOCOMA','sent_read',5,'p_sent_read','Sintactico.py',80),
  ('sent_write -> WRITE PARIZQ exp PARDER PUNTOCOMA','sent_write',5,'p_sent_write','Sintactico.py',84),
  ('bloque -> LLAIZQ lista_sent LLADER','bloque',3,'p_bloque','Sintactico.py',88),
  ('sent_assign -> IDENTIFICADOR ASIGNAR exp PUNTOCOMA','sent_assign',4,'p_sent_assign','Sintactico.py',92),
  ('exp_bool -> exp_bool OR exp_bool','exp_bool',3,'p_exp_bool','Sintactico.py',96),
  ('exp_bool -> exp_bool AND exp_bool','exp_bool',3,'p_exp_bool','Sintactico.py',97),
  ('exp_bool -> NOT exp_bool','exp_bool',2,'p_exp_bool','Sintactico.py',98),
  ('exp_bool -> exp_rel','exp_bool',1,'p_exp_bool','Sintactico.py',99),
  ('exp_rel -> exp MENORQUE exp','exp_rel',3,'p_exp_rel','Sintactico.py',108),
  ('exp_rel -> exp MAYORQUE exp','exp_rel',3,'p_exp_rel','Sintactico.py',109),
  ('exp_rel -> exp MENORIGUAL exp','exp_rel',3,'p_exp_rel','Sintactico.py',110),
  ('exp_rel -> exp MAYORIGUAL exp','exp_rel',3,'p_exp_rel','Sintactico.py',111),
  ('exp_rel -> exp IGUAL exp','exp_rel',3,'p_exp_rel','Sintactico.py',112),
  ('exp_rel -> exp DISTINTO exp','exp_rel',3,'p_exp_rel','Sintactico.py',113),
  ('exp -> exp SUMA exp','exp',3,'p_exp','Sintactico.py',117),
  ('exp -> exp RESTA exp','exp',3,'p_exp','Sintactico.py',118),
  ('exp -> exp MULT exp','exp',3,'p_exp','Sintactico.py',119),
  ('exp -> exp DIV exp','exp',3,'p_exp','Sintactico.py',120),
  ('exp -> exp POTENCIA exp','exp',3,'p_exp','Sintactico.py',121),
  ('exp -> exp MODULO exp','exp',3,'p_exp','Sintactico.py',122),
  ('exp -> factor','exp',1,'p_exp','Sintactico.py',123),
  ('factor -> ENTERO','factor',1,'p_factor','Sintactico.py',130),
  ('factor -> IDENTIFICADOR','factor',1,'p_factor','Sintactico.py',131),
  ('factor -> CADENA','factor',1,'p_factor','Sintactico.py',132),
  ('factor -> PARIZQ exp PARDER','factor',3,'p_factor','Sintactico.py',133),
  ('empty -> <empty>','empty',0,'p_empty','Sintactico.py',140),
]
