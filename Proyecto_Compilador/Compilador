import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import re
import Lexico

# Definir las palabras clave y operadores
keywords = {"int", "float", "double", "char", "string", "bool", "print", "main", "for", "while", "true", "if", "void", "while", "do", "switch", "case"}
operators = {";", ")", "(", "{", "}", "+", "-", "*", "/", "%", "=", "==", "!=", ">", "<", ">=", "<=", "&&", "||", "!", "++", "--", "+=", "-=", "=", "/=", "%="}

# Función para resaltar las palabras clave y operadores
def highlight(event):
    text = text_entry.get("1.0", "end-1c")
    text_entry.tag_remove("keyword", "1.0", "end")
    text_entry.tag_remove("operator", "1.0", "end")
    
    # Buscar palabras clave y operadores
    for word in text.split():
        if word in keywords:
            start = "1.0"
            while True:
                pos = text_entry.search(word, start, stopindex="end")
                if not pos:
                    break
                end = f"{pos}+{len(word)}c"
                text_entry.tag_add("keyword", pos, end)
                start = end
        elif any(char in operators for char in word):
            start = "1.0"
            while True:
                for char in word:
                    if char in operators:
                        pos = text_entry.search(char, start, stopindex="end")
                        end = f"{pos}+1c"
                        text_entry.tag_add("operator", pos, end)
                        start = end
                start = f"{start}+1c"
                pos = text_entry.search(word, start, stopindex="end")
                if not pos:
                    break
                start = pos
    
    # Buscar y resaltar la palabra "else" en rojo
    for match in re.finditer(r'\belse\b', text):
        start = "1.0 +{}c".format(match.start())
        end = "1.0 +{}c".format(match.end())
        text_entry.tag_add("red_keyword", start, end)
    
    # Buscar y resaltar el número después de "case"
    for match in re.finditer(r'\bcase\s+(\d+)\b', text):
        start = f"1.0 +{match.start(1)}c"  # Inicio del número después de "case"
        end = f"1.0 +{match.end(1)}c"  # Fin del número después de "case"
        text_entry.tag_add("purple_number", start, end)

def open_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        with open(file_path, "r") as file:
            text = file.read()
            text_entry.delete("1.0", "end")
            text_entry.insert("1.0", text)

def save_file():
    file_path = filedialog.asksaveasfilename(defaultextension=".txt")
    if file_path:
        with open(file_path, "w") as file:
            text = text_entry.get("1.0", "end-1c")
            file.write(text)

def save_as_file():
    file_path = filedialog.asksaveasfilename()
    if file_path:
        with open(file_path, "w") as file:
            text = text_entry.get("1.0", "end-1c")
            file.write(text)

def analyze_lexical():
    text = text_entry.get("1.0", "end-1c")
    tokens = Lexico.tokenize(text)
    lexical_result = "\n".join(f"{token[0]} : {token[1]}" for token in tokens)
    result_text_lexical.config(state="normal")
    result_text_lexical.delete("1.0", "end")
    result_text_lexical.insert("1.0", lexical_result)
    result_text_lexical.config(state="disabled")

# Crear la ventana principal
root = tk.Tk()
root.title("Editor de Código")

# Menú
menu_bar = tk.Menu(root)
root.config(menu=menu_bar)

# Menú Archivo
file_menu = tk.Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Archivo", menu=file_menu)
file_menu.add_command(label="Abrir", command=open_file)
file_menu.add_command(label="Guardar", command=save_file)
file_menu.add_command(label="Guardar como", command=save_as_file)

# Menú Editar
edit_menu = tk.Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Editar", menu=edit_menu)

# Menú Formato
format_menu = tk.Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Formato", menu=format_menu)

# Menú Compilar
compile_menu = tk.Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Compilar", menu=compile_menu)
compile_menu.add_command(label="Correr")
compile_menu.add_command(label="Analizar léxico", command=analyze_lexical)

# Menú Ayuda
help_menu = tk.Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Ayuda", menu=help_menu)

# Dividir la ventana en tres secciones
left_frame = tk.Frame(root)
left_frame.pack(side="left", fill="both", expand=True)

right_frame = tk.Frame(root)
right_frame.pack(side="right", fill="both", expand=True)

# Sección izquierda: área de entrada de texto
text_entry = tk.Text(left_frame, wrap="word", width=60, height=20)
text_entry.pack(side="left", expand=True, fill="both")

# Configurar las etiquetas de texto para resaltar palabras clave y operadores
text_entry.tag_config("keyword", foreground="blue")
text_entry.tag_config("red_keyword", foreground="red")  # Etiqueta para resaltar "else" en rojo
text_entry.tag_config("operator", foreground="red")
text_entry.tag_config("purple_number", foreground="purple")  # Etiqueta para resaltar números después de "case"

# Llamar a la función highlight cuando se presione una tecla
text_entry.bind("<KeyRelease>", highlight)

# Sección derecha: dividirla en dos partes
top_right_frame = tk.Frame(right_frame)
top_right_frame.pack(side="top", fill="both", expand=True)

bottom_right_frame = tk.Frame(right_frame)
bottom_right_frame.pack(side="bottom", fill="both", expand=True)

# Crear pestañas para el analizador léxico, semántico, sintáctico y código intermedio en la sección superior derecha
analyzer_notebook = ttk.Notebook(top_right_frame)

lexical_tab = ttk.Frame(analyzer_notebook)
analyzer_notebook.add(lexical_tab, text="Analizador Léxico")

semantic_tab = ttk.Frame(analyzer_notebook)
analyzer_notebook.add(semantic_tab, text="Analizador Semántico")

syntax_tab = ttk.Frame(analyzer_notebook)
analyzer_notebook.add(syntax_tab, text="Analizador Sintáctico")

intermediate_tab = ttk.Frame(analyzer_notebook)
analyzer_notebook.add(intermediate_tab, text="Código Intermedio")

analyzer_notebook.pack(expand=True, fill="both")

# Crear recuadros de texto en las pestañas de los analizadores y código intermedio, sin permitir edición
result_text_lexical = tk.Text(lexical_tab, state="disabled")
result_text_lexical.pack(expand=True, fill="both")

# Crear pestañas para errores y resultado en la sección inferior derecha
error_notebook = ttk.Notebook(bottom_right_frame)

error_tab = ttk.Frame(error_notebook)
error_notebook.add(error_tab, text="Errores")

result_tab = ttk.Frame(error_notebook)
error_notebook.add(result_tab, text="Resultado")

error_notebook.pack(expand=True, fill="both")

# Permitir la edición en el área de texto de errores
error_text = tk.Text(error_tab)
error_text.pack(expand=True, fill="both")

# Crear recuadro de texto para el resultado, sin permitir edición
result_text = tk.Text(result_tab, state="disabled")
result_text.pack(expand=True, fill="both")

# Iniciar el bucle principal
root.mainloop()
